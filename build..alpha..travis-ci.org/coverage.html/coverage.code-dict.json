{"/home/travis/build/npmtest/node-npmtest-slush/test.js":"/* istanbul instrument in package npmtest_slush */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slush/lib.npmtest_slush.js":"/* istanbul instrument in package npmtest_slush */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_slush = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_slush = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-slush/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-slush && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_slush */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_slush\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_slush.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_slush.rollup.js'] =\n            local.assetsDict['/assets.npmtest_slush.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_slush.__dirname + '/lib.npmtest_slush.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slush/node_modules/slush/bin/slush.js":"#!/usr/bin/env node\n\n'use strict';\nvar gutil = require('gulp-util');\nvar prettyTime = require('pretty-hrtime');\nvar glob = require('glob');\nvar path = require('path');\nvar chalk = require('chalk');\nvar archy = require('archy');\nvar Liftoff = require('liftoff');\nvar taskTree = require('../lib/taskTree');\nvar log = require('../lib/log');\nvar slushPackage = require('../package');\nvar argv = require('minimist')(process.argv.slice(2));\nvar versionFlag = argv.v || argv.version;\nvar params = argv._.slice();\nvar generatorAndTasks = params.length ? params.shift().split(':') : [];\nvar generatorName = generatorAndTasks.shift();\n\nif (!generatorName) {\n  if (versionFlag) {\n    log(slushPackage.version);\n  } else {\n    logGenerators(getAllGenerators());\n  }\n  process.exit(0);\n}\n\nvar generator = getGenerator(generatorName);\n\nif (!generator) {\n  log(chalk.red('No generator by name: \"' + generatorName + '\" was found!'));\n  log(chalk.red('Try installing it with `npm install -g slush-' + generatorName + '` first.'));\n  process.exit(1);\n}\n\n// Setting cwd and slushfile dir:\nargv.cwd = process.cwd();\nargv.slushfile = path.join(generator.path, 'slushfile.js');\nargv._ = generatorAndTasks;\n\nvar cli = new Liftoff({\n  processTitle: 'slush',\n  moduleName: 'gulp',\n  configName: 'slushfile'\n  // completions: require('../lib/completion') FIXME\n});\n\ncli.on('require', function(name) {\n  gutil.log('Requiring external module', chalk.magenta(name));\n});\n\ncli.on('requireFail', function(name) {\n  gutil.log(chalk.red('Failed to load external module'), chalk.magenta(name));\n});\n\ncli.launch(handleArguments, argv);\n\nfunction handleArguments(env) {\n\n  var argv = env.argv;\n  var tasksFlag = argv.T || argv.tasks;\n  var tasks = argv._;\n  var toRun = tasks.length ? tasks : ['default'];\n  var args = params;\n\n  if (versionFlag) {\n    log(slushPackage.version);\n    if (env.modulePackage) {\n      gutil.log(env.modulePackage.version);\n    }\n    if (generator.pkg.version) {\n      console.log('[' + chalk.green('slush-' + generator.name) + '] ' + generator.pkg.version);\n    }\n    process.exit(0);\n  }\n\n  if (!env.modulePath) {\n    gutil.log(chalk.red('No local gulp install found in'), chalk.magenta(generator.path));\n    log(chalk.red('This is an issue with the `slush-' + generator.name + '` generator'));\n    process.exit(1);\n  }\n\n  if (!env.configPath) {\n    log(chalk.red('No slushfile found'));\n    log(chalk.red('This is an issue with the `slush-' + generator.name + '` generator'));\n    process.exit(1);\n  }\n\n  require(env.configPath);\n  log('Using slushfile', chalk.magenta(env.configPath));\n\n  var gulpInst = require(env.modulePath);\n  gulpInst.args = args;\n  logEvents(generator.name, gulpInst);\n\n  if (process.cwd() !== env.cwd) {\n    process.chdir(env.cwd);\n    gutil.log('Working directory changed to', chalk.magenta(env.cwd));\n  }\n\n  process.nextTick(function() {\n    if (tasksFlag) {\n      return logTasks(generator.name, gulpInst);\n    }\n    gulpInst.start.apply(gulpInst, toRun);\n  });\n}\n\nfunction logGenerators(generators) {\n  var tree = {\n    label: 'Installed generators',\n    nodes: generators.map(function (gen) {\n      return {label: gen.name + (gen.pkg.version ? chalk.grey(' (' + gen.pkg.version + ')') : '')};\n    })\n  };\n  archy(tree).split('\\n').forEach(function(v) {\n    if (v.trim().length === 0) return;\n    log(v);\n  });\n}\n\nfunction logTasks(name, localGulp) {\n  var tree = taskTree(localGulp.tasks);\n  tree.label = 'Tasks for generator ' + chalk.magenta(name);\n  archy(tree).split('\\n').forEach(function(v) {\n    if (v.trim().length === 0) return;\n    gutil.log(v);\n  });\n}\n\n// format orchestrator errors\nfunction formatError(e) {\n  if (!e.err) return e.message;\n  if (e.err.message) return e.err.message;\n  return JSON.stringify(e.err);\n}\n\n// wire up logging events\nfunction logEvents(name, gulpInst) {\n  gulpInst.on('task_start', function(e) {\n    gutil.log('Starting', \"'\" + chalk.cyan(name + ':' + e.task) + \"'...\");\n  });\n\n  gulpInst.on('task_stop', function(e) {\n    var time = prettyTime(e.hrDuration);\n    gutil.log('Finished', \"'\" + chalk.cyan(name + ':' + e.task) + \"'\", 'after', chalk.magenta(time));\n  });\n\n  gulpInst.on('task_err', function(e) {\n    var msg = formatError(e);\n    var time = prettyTime(e.hrDuration);\n    gutil.log(\"'\" + chalk.cyan(name + ':' + e.task) + \"'\", 'errored after', chalk.magenta(time), chalk.red(msg));\n  });\n\n  gulpInst.on('task_not_found', function(err) {\n    log(chalk.red(\"Task '\" + err.task + \"' was not defined in `slush-\" + name + \"` but you tried to run it.\"));\n    process.exit(1);\n  });\n\n  gulpInst.on('stop', function () {\n    log('Scaffolding done');\n  });\n}\n\nfunction getGenerator (name) {\n  return getAllGenerators().filter(function (gen) {\n    return gen.name === name;\n  })[0];\n}\n\nfunction getAllGenerators () {\n  return findGenerators(getModulesPaths());\n}\n\nfunction getModulesPaths () {\n  if (process.env.NODE_ENV === 'test') {\n    return [path.join(__dirname, '..', 'test')];\n  }\n  var sep = (process.platform === 'win32') ? ';' : ':';\n  var paths = [];\n\n  if (process.env.NODE_PATH) {\n    paths = paths.concat(process.env.NODE_PATH.split(sep));\n  } else {\n    if (process.platform === 'win32') {\n      paths.push(path.join(process.env.APPDATA, 'npm', 'node_modules'));\n    } else {\n      paths.push('/usr/lib/node_modules');\n    }\n  }\n\n  paths.push(path.join(__dirname, '..', '..'));\n  paths.push.apply(paths, require.main.paths);\n  return paths.filter(function(path, index, all){\n    return all.lastIndexOf(path) === index;\n  });\n}\n\nfunction findGenerators (searchpaths) {\n  return searchpaths.reduce(function (arr, searchpath) {\n    return arr.concat(glob.sync('{@*/,}slush-*', {cwd: searchpath, stat: true}).map(function (match) {\n      var generator = {path: path.join(searchpath, match), name: match.replace(/(?:@[\\w]+[\\/|\\\\]+)?slush-/, \"\"), pkg: {}};\n      try {\n        generator.pkg = require(path.join(searchpath, match, 'package.json'));\n      } catch (e) {\n      }\n      return generator;\n    }));\n  }, []);\n}\n","/home/travis/build/npmtest/node-npmtest-slush/node_modules/slush/lib/taskTree.js":"'use strict';\n\nmodule.exports = function(tasks) {\n  return Object.keys(tasks).reduce(function(prev, task) {\n    prev.nodes.push({\n      label: task,\n      nodes: tasks[task].dep\n    });\n    return prev;\n  }, {nodes: []});\n};\n","/home/travis/build/npmtest/node-npmtest-slush/node_modules/slush/lib/log.js":"var chalk = require('chalk');\n\nmodule.exports = function(){\n  'use strict';\n  var sig = '['+chalk.green('slush')+']';\n  var args = Array.prototype.slice.call(arguments);\n  args.unshift(sig);\n  console.log.apply(console, args);\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-slush/node_modules/slush/lib/completion.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function(name) {\n  if (typeof name !== 'string') throw new Error('Missing completion type');\n  var file = path.join(__dirname, '../completion', name);\n  try {\n      console.log(fs.readFileSync(file, 'utf8'));\n      process.exit(0);\n  } catch (err) {\n      console.log('echo \"Specified gulp shell auto-completion rules for \\''+name+'\\' not found\"');\n      process.exit(5);\n  }\n};\n"}